[gd_scene load_steps=7 format=3 uid="uid://cyho1nxf46cy5"]

[ext_resource type="Texture2D" uid="uid://bhn1ue3ns2dqb" path="res://assets/graphics/prototyping/Orange/texture_02.png" id="1_iqg5u"]

[sub_resource type="Shader" id="Shader_qk32x"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.2.1.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color,filter_linear_mipmap,repeat_enable;
uniform float point_size : hint_range(0,128);
uniform float roughness : hint_range(0,1);
uniform sampler2D texture_metallic : hint_default_white,filter_linear_mipmap,repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r,filter_linear_mipmap,repeat_enable;
uniform sampler2D texture_depth : hint_depth_texture, filter_linear, repeat_disable;
uniform float specular;
uniform float metallic;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;
uniform vec3 focus_position = vec3(0.,0.,0.);
uniform float focus_radius = 1.0;

varying vec3 world_position;
varying vec3 obj_position;

void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
	obj_position = VERTEX;
	world_position = (MODEL_MATRIX * vec4(VERTEX, 1.0)).xyz;
}

void fragment() {
	vec2 base_uv = UV;
	float alpha = 1.0;
	vec4 albedo_tex = texture(texture_albedo,base_uv);

	float radius = 1.5;
	vec3 dir = focus_position - CAMERA_POSITION_WORLD;
	float plane = -1.0 * dot(world_position, dir);
	float param = (dot(focus_position, dir) + plane) / (dir.x * dir.x + dir.y * dir.y + dir.z * dir.z);
	vec3 intersection = focus_position - (dir * param);
	float dist = distance(world_position, intersection);
	
	if (dist < radius) discard;
	/*
	float depth = textureLod(texture_depth, SCREEN_UV, 0.0).r;
	vec4 upos = INV_PROJECTION_MATRIX * vec4(SCREEN_UV * 2.0 - 1.0, depth, 1.0);
	vec3 pixel_position = upos.xyz / upos.w;
	*/
	
	/*
	vec4 vconv = VIEW_MATRIX * vec4(focus_position, 1.);//PROJECTION_MATRIX * vec4(focus_position, 1.);
	vconv = PROJECTION_MATRIX * vconv;
	vconv.xyz = vconv.xyz / vconv.w;
	vec2 focus_screen_pos = ((vconv.xy * 0.5) + vec2(0.5)) * VIEWPORT_SIZE;
	float focus_depth = (vconv.z * 0.5) + 0.5;
	float focus_screen_distance = length(focus_screen_pos.xy - FRAGCOORD.xy);
	*/
	
	//alpha = FRAGCOORD.z;
	//alpha = (pixel_position.z < 0.5) ? 1.0 : 0.0;
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	//ALBEDO = vec3(pixel_position.z);
	
	float metallic_tex = dot(texture(texture_metallic,base_uv),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	vec4 roughness_texture_channel = vec4(1.0,0.0,0.0,0.0);
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
	//ALPHA = alpha;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_x77bi"]
resource_name = "Prototype_Texture2"
render_priority = 0
shader = SubResource("Shader_qk32x")
shader_parameter/albedo = Color(1, 1, 1, 1)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 0.5
shader_parameter/metallic_texture_channel = null
shader_parameter/specular = 0.5
shader_parameter/metallic = 0.0
shader_parameter/uv1_scale = Vector3(1, 1, 1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
shader_parameter/focus_position = Vector3(10, 0, 0)
shader_parameter/focus_radius = 100.0
shader_parameter/texture_albedo = ExtResource("1_iqg5u")

[sub_resource type="ArrayMesh" id="ArrayMesh_piwh5"]
_surfaces = [{
"aabb": AABB(-1, -2, -1, 2.00001, 2.00001, 2),
"format": 34896613377,
"index_count": 36,
"index_data": PackedByteArray(0, 0, 6, 0, 4, 0, 0, 0, 2, 0, 6, 0, 3, 0, 6, 0, 2, 0, 3, 0, 7, 0, 6, 0, 7, 0, 4, 0, 6, 0, 7, 0, 5, 0, 4, 0, 5, 0, 3, 0, 1, 0, 5, 0, 7, 0, 3, 0, 1, 0, 2, 0, 0, 0, 1, 0, 3, 0, 2, 0, 5, 0, 0, 0, 4, 0, 5, 0, 1, 0, 0, 0),
"name": "Prototype_Texture2",
"primitive": 3,
"uv_scale": Vector4(0, 0, 0, 0),
"vertex_count": 8,
"vertex_data": PackedByteArray(254, 255, 254, 255, 0, 0, 0, 0, 254, 255, 0, 0, 0, 0, 0, 0, 254, 255, 254, 255, 255, 255, 0, 0, 254, 255, 0, 0, 255, 255, 0, 0, 0, 0, 254, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254, 255, 255, 255, 0, 0, 0, 0, 0, 0, 255, 255, 0, 0)
}]
blend_shape_mode = 0

[sub_resource type="ArrayMesh" id="ArrayMesh_xytmk"]
resource_name = "MeshLibrary_Cube"
_surfaces = [{
"aabb": AABB(-1, -2, -1, 2.00001, 2.00001, 2),
"attribute_data": PackedByteArray(255, 255, 0, 0, 255, 255, 0, 0, 255, 255, 0, 0, 255, 255, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 255, 255, 0, 0, 255, 255, 255, 255, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 0, 0, 255, 255, 0, 0, 255, 255, 0, 0, 255, 255),
"format": 34896613399,
"index_count": 36,
"index_data": PackedByteArray(1, 0, 20, 0, 13, 0, 1, 0, 8, 0, 20, 0, 11, 0, 19, 0, 7, 0, 11, 0, 23, 0, 19, 0, 21, 0, 14, 0, 18, 0, 21, 0, 17, 0, 14, 0, 15, 0, 10, 0, 3, 0, 15, 0, 22, 0, 10, 0, 5, 0, 6, 0, 2, 0, 5, 0, 9, 0, 6, 0, 16, 0, 0, 0, 12, 0, 16, 0, 4, 0, 0, 0),
"material": SubResource("ShaderMaterial_x77bi"),
"name": "Prototype_Texture2",
"primitive": 3,
"uv_scale": Vector4(0, 0, 0, 0),
"vertex_count": 24,
"vertex_data": PackedByteArray(254, 255, 254, 255, 0, 0, 0, 0, 254, 255, 254, 255, 0, 0, 255, 191, 254, 255, 254, 255, 0, 0, 255, 191, 254, 255, 0, 0, 0, 0, 255, 63, 254, 255, 0, 0, 0, 0, 0, 0, 254, 255, 0, 0, 0, 0, 255, 191, 254, 255, 254, 255, 255, 255, 255, 191, 254, 255, 254, 255, 255, 255, 255, 127, 254, 255, 254, 255, 255, 255, 255, 191, 254, 255, 0, 0, 255, 255, 255, 191, 254, 255, 0, 0, 255, 255, 255, 63, 254, 255, 0, 0, 255, 255, 255, 127, 0, 0, 254, 255, 0, 0, 0, 0, 0, 0, 254, 255, 0, 0, 255, 191, 0, 0, 254, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254, 255, 255, 255, 0, 0, 0, 0, 254, 255, 255, 255, 255, 127, 0, 0, 254, 255, 255, 255, 255, 191, 0, 0, 0, 0, 255, 255, 0, 0, 0, 0, 0, 0, 255, 255, 255, 63, 0, 0, 0, 0, 255, 255, 255, 127, 255, 255, 255, 127, 255, 255, 255, 127, 255, 127, 0, 0, 0, 0, 255, 127, 255, 255, 255, 127, 255, 127, 0, 0, 255, 127, 0, 0, 255, 127, 255, 255, 255, 255, 255, 127, 255, 127, 0, 0, 0, 0, 255, 127, 255, 127, 255, 255, 255, 255, 255, 127, 255, 255, 255, 127, 255, 63, 255, 127, 0, 0, 255, 127, 255, 255, 255, 127, 255, 63, 255, 127, 255, 63, 255, 127, 255, 127, 255, 255, 255, 255, 255, 127, 255, 63, 255, 127, 0, 0, 255, 127, 255, 127, 255, 255)
}]
blend_shape_mode = 0
shadow_mesh = SubResource("ArrayMesh_piwh5")

[sub_resource type="BoxShape3D" id="BoxShape3D_axpur"]
size = Vector3(2, 2, 2)

[node name="MesheLibrary01" type="Node3D"]

[node name="Cube" type="MeshInstance3D" parent="."]
mesh = SubResource("ArrayMesh_xytmk")
skeleton = NodePath("")

[node name="StaticBody3D" type="StaticBody3D" parent="Cube"]

[node name="CollisionShape3D" type="CollisionShape3D" parent="Cube/StaticBody3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -1, 0)
shape = SubResource("BoxShape3D_axpur")
